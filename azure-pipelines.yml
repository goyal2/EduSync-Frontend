name: EduSync-Frontend-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'src/*'
    - 'public/*'
    - 'package.json'
    - 'package-lock.json'
    exclude:
    - '*.md'
    - 'docs/*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  projectName: 'edusyncfrontend'
  NODE_VERSION: '20.x'
  npm_config_cache: $(Pipeline.Workspace)/.npm

steps:
- task: NodeTool@0
  inputs:
    versionSpec: $(NODE_VERSION)
    checkLatest: true
  displayName: 'Install Node.js'

- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: $(npm_config_cache)
  displayName: 'Cache npm packages'

- script: |
    node -v
    npm -v
    npm config set cache $(npm_config_cache) --global
    npm config set registry https://registry.npmjs.org/
    npm config set loglevel error
  displayName: 'Configure npm'

- script: |
    npm ci --prefer-offline --legacy-peer-deps
  displayName: 'Install Dependencies'
  env:
    NODE_OPTIONS: '--max-old-space-size=8192'

- script: |
    cat > .env << EOF
    REACT_APP_API_URL=https://edusync-api.azurewebsites.net
    REACT_APP_ENV=production
    GENERATE_SOURCEMAP=false
    CI=false
    NODE_ENV=production
    EOF
  displayName: 'Configure Environment'

- script: |
    npm run build
  displayName: 'Build React App'
  env:
    CI: 'false'
    NODE_OPTIONS: '--max-old-space-size=8192'

- script: |
    echo '{
      "navigationFallback": {
        "rewrite": "/index.html",
        "exclude": [
          "/images/*",
          "/css/*",
          "/js/*",
          "/assets/*",
          "/*.{ico,png,jpg,gif}",
          "/manifest.json"
        ]
      },
      "routes": [
        {
          "route": "/static/*",
          "headers": {
            "cache-control": "public, max-age=31536000, immutable"
          }
        },
        {
          "route": "/assets/*",
          "headers": {
            "cache-control": "public, max-age=31536000, immutable"
          }
        },
        {
          "route": "/*",
          "serve": "/index.html",
          "statusCode": 200
        }
      ],
      "globalHeaders": {
        "content-security-policy": "default-src https: ''unsafe-eval'' ''unsafe-inline''; object-src ''none''"
      },
      "mimeTypes": {
        ".json": "text/json"
      }
    }' > build/staticwebapp.config.json
  displayName: 'Create Static Web App Config'

- task: AzureStaticWebApp@0
  inputs:
    app_location: 'build'
    skip_app_build: true
    is_static_export: true
    azure_static_web_apps_api_token: $(Deployment)
    deployment_environment: 'production'
  displayName: 'Deploy to Azure Static Web Apps'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'build'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(projectName)-$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Archive Build Files'
  condition: succeeded()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'
  condition: succeeded() 